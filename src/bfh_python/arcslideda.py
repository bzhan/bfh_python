"""Producing type DA structures for arcslides, using local actions."""

from .algebra import TensorGenerator
from .dastructure import DAStructure, SimpleDAGenerator
from .extendbyid import ExtendedDAStructure, LocalDAStructure
from .hdiagram import getArcslideDiagram
from .localpmc import LocalIdempotent, LocalStrandAlgebra, PMCSplitting
from .pmc import Strands, StrandDiagram
from .utility import memorize, subset
from .utility import ACTION_LEFT, ACTION_RIGHT, F2
import itertools

class ArcslideDA(ExtendedDAStructure):
    """Responsible for producing a type DA structure for an arcslide, using
    local actions.

    """
    def __init__(self, slide):
        """Specifies the arcslide to use. slide should be of type Arcslide.
        In addition to recording slide, construct the following:
        local_pmc1, mapping1 - restriction of starting pmc to location of slide.
        outer_pmc1, outer_mapping1 - complement of slide in starting pmc.
        local_pmc2, mapping2, outer_pmc2, outer_mapping2
          - same, but for ending pmc.
        Moreover, find pattern_fun and translator as appropriate for the case at
        hand.

        """
        self.slide = slide
        self.pmc1, self.pmc2 = slide.start_pmc, slide.end_pmc

        n = self.pmc1.n
        b1, c1, c2 = slide.b1, slide.c1, slide.c2
        b1p, c1p, c2p = [slide.to_r[p] for p in (b1, c1, c2)]

        # Note intervals (start, end) with start > end are ignored.
        # patterns_base specifies one of the four base patterns of arcslides.
        # translator gives the mapping between points in the base pattern and
        # points in the pattern at hand.
        if b1 == c1 + 1:  # downward
            if c2 == c1 + 2:  # short underslide downward
                local_cut1, local_cut2 = ([(c1, c2)], [(c1p, c2p)])
                patterns_fun = ArcslideDA._short_underslide_down
                if c1 == 0:
                    translator = ([-1, 0, 1, 2, 3], [-1, 0, 1, 2, 3])
                elif c2 == n - 1:
                    translator = ([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])
                else:
                    translator = None
            elif c2 > c1:  # general underslide downward
                local_cut1, local_cut2 = (
                    [(c1, b1), (c2, c2)], [(c1p, c1p), (b1p, c2p)])
                patterns_fun = ArcslideDA._general_underslide_down
                if c1 == 0:
                    translator = ([-1, 0, 1, 2, 3, 4, 5],
                                  [-1, 0, 1, 2, 3, 4, 5])
                elif c2 == n - 1:
                    translator = ([0, 1, 2, 3, 4, 5, -1],
                                  [0, 1, 2, 3, 4, 5, -1])
                else:
                    translator = None
            else:  # c2 < c1, general overslide downward
                local_cut1, local_cut2 = (
                    [(c2, c2), (c1, b1)], [(b1p, c2p), (c1p, c1p)])
                patterns_fun = ArcslideDA._general_underslide_down
                if c2 == 0 and b1 == n - 1:
                    translator = ([2, 3, 4, -1, -1, 0, 1],
                                  [3, 4, -1, -1, 0, 1, 2])
                elif c2 == 0:
                    translator = ([2, 3, 4, 5, -1, 0, 1],
                                  [3, 4, 5, -1, 0, 1, 2])
                elif b1 == n - 1:
                    translator = ([3, 4, 5, -1, 0, 1, 2],
                                  [4, 5, -1, 0, 1, 2, 3])
                else:
                    translator = ([3, 4, 5, 6, 0, 1, 2], [4, 5, 6, 0, 1, 2, 3])
        elif b1 == c1 - 1:  # upward
            if c2 == c1 - 2:  # short underslide upward
                local_cut1, local_cut2 = ([(c2, c1)], [(c2p, c1p)])
                patterns_fun = ArcslideDA._short_underslide_up
                if c2 == 0:
                    translator = ([-1, 0, 1, 2, 3], [-1, 0, 1, 2, 3])
                elif c1 == n - 1:
                    translator = ([0, 1, 2, 3, -1], [0, 1, 2, 3, -1])
                else:
                    translator = None
            elif c2 < c1:  # general underslide upward
                local_cut1, local_cut2 = (
                    [(c2, c2), (b1, c1)], [(c2p, b1p), (c1p, c1p)])
                patterns_fun = ArcslideDA._general_underslide_up
                if c2 == 0:
                    translator = ([-1, 0, 1, 2, 3, 4, 5],
                                  [-1, 0, 1, 2, 3, 4, 5])
                elif c1 == n - 1:
                    translator = ([0, 1, 2, 3, 4, 5, -1],
                                  [0, 1, 2, 3, 4, 5, -1])
                else:
                    translator = None
            else:  # c2 > c1, general overslide upward
                local_cut1, local_cut2 = (
                    [(b1, c1), (c2, c2)], [(c1p, c1p), (c2p, b1p)])
                patterns_fun = ArcslideDA._general_underslide_up
                if b1 == 0 and c2 == n - 1:
                    translator = ([3, 4, -1, -1, 0, 1, 2],
                                  [2, 3, 4, -1, -1, 0, 1])
                elif b1 == 0:
                    translator = ([3, 4, 5, -1, 0, 1, 2],
                                  [2, 3, 4, 5, -1, 0, 1])
                elif c2 == n - 1:
                    translator = ([4, 5, -1, 0, 1, 2, 3],
                                  [3, 4, 5, -1, 0, 1, 2])
                else:
                    translator = ([4, 5, 6, 0, 1, 2, 3], [3, 4, 5, 6, 0, 1, 2])
        else:
            # All cases are covered. Should not happen.
            raise NotImplementedError(
                "This slide pattern is not yet implemented.")

        self.patterns_fun = patterns_fun
        self.translator = translator

        # Necesssary to get local DA structure.
        self.splitting1 = PMCSplitting(self.pmc1, local_cut1)
        self.splitting2 = PMCSplitting(self.pmc2, local_cut2)
        self.local_pmc1 = self.splitting1.local_pmc
        self.local_pmc2 = self.splitting2.local_pmc
        self.mapping1 = self.splitting1.local_mapping
        self.mapping2 = self.splitting2.local_mapping

        # Required so the left to right transition on the outside can proceed.
        assert self.splitting1.outer_pmc == self.splitting2.outer_pmc

        # Initiate the ExtendedDAStructure
        ExtendedDAStructure.__init__(
            self, self.getLocalDAStructure(), self.splitting1, self.splitting2)

        # With generators set, add grading. Any generator can serve as base_gen
        for gen in self.generators:
            base_gen = gen
            break
        self.registerHDiagram(getArcslideDiagram(self.slide), base_gen)

    def getLocalDAStructure(self, seeds_only = False):
        """Returns the local type DA structure associated to slide. If
        seeds_only is set to True, get a local DA structure with incomplete
        da_action, that can be completed using the autocompleteda module.

        """

        # Compute the set of arrow patterns
        patterns_raw = self.patterns_fun(seeds_only = seeds_only)
        if self.translator is not None:
            patterns_raw = ArcslideDA._restrict_local_arrows(
                patterns_raw, self.translator[0], self.translator[1])

        arrow_patterns = {}
        for pattern in patterns_raw:
            coeffs_a = []
            for i in range(len(pattern)-1):
                coeffs_a.append(self.local_pmc2.sd(pattern[i]))
            coeffs_a = tuple(coeffs_a)
            if coeffs_a not in arrow_patterns:
                arrow_patterns[coeffs_a] = []
            arrow_patterns[coeffs_a].append(self.local_pmc1.sd(pattern[-1]))

        # Now start construction of the local DA structure.
        alg1 = LocalStrandAlgebra(F2, self.local_pmc1)
        alg2 = LocalStrandAlgebra(F2, self.local_pmc2)
        local_dastr = LocalDAStructure(F2, alg1, alg2)

        # Mappings between local starting and ending PMC.
        slide = self.slide
        local_to_r = dict()
        for i in range(slide.start_pmc.n):
            if i in self.mapping1:
                # to_r[i] must be in mapping2
                local_to_r[self.mapping1[i]] = self.mapping2[slide.to_r[i]]
        local_pair_to_r = dict()
        for i in range(self.local_pmc1.n):
            if i not in self.local_pmc1.endpoints:
                local_pair_to_r[self.local_pmc1.pairid[i]] \
                    = self.local_pmc2.pairid[local_to_r[i]]
            
        b1, c1 = self.slide.b1, self.slide.c1
        local_b1, local_c1 = self.mapping1[b1], self.mapping1[c1]
        b_pair1 = self.local_pmc1.pairid[local_b1]
        c_pair1 = self.local_pmc1.pairid[local_c1]

        # Compute the set of local generators. This includes all
        # (l_idem, r_idem) where l_idem = r_idem (under the usual identification
        # of pairs), or where l_idem has the c_pair and r_idem has the b_pair.
        da_idems = []
        num_pair = self.local_pmc1.num_pair
        for idem in subset(list(range(num_pair))):
            da_idems.append((list(idem), [local_pair_to_r[p] for p in idem]))
        for idem in subset([p for p in range(num_pair)
                            if p != b_pair1 and p != c_pair1]):
            da_idems.append((list(idem) + [c_pair1],
                             [local_pair_to_r[p]
                              for p in (list(idem) + [b_pair1])]))
        for i in range(len(da_idems)):
            l_idem, r_idem = da_idems[i]
            local_dastr.addGenerator(SimpleDAGenerator(
                local_dastr, LocalIdempotent(self.local_pmc1, l_idem),
                LocalIdempotent(self.local_pmc2, r_idem), "%d" % i))
        mod_gens = local_dastr.getGenerators()

        # After having added all generators, create u_map:
        local_dastr.auto_u_map()

        # Add arrows according to arrow_pattern.
        for coeffs_a in list(arrow_patterns.keys()):
            if len(coeffs_a) == 1 and coeffs_a[0].isIdempotent():
                continue
            for coeff_d in arrow_patterns[coeffs_a]:
                for x, y in itertools.product(mod_gens, mod_gens):
                    if DAStructure.idemMatchDA(x, y, coeff_d, coeffs_a):
                        local_dastr.addDelta(x, y, coeff_d, coeffs_a, 1)
        return local_dastr

    @staticmethod
    def _restrict_local_arrows(patterns, point_map_d, point_map_a):
        """Given a list of patterns (in the format of patterns_raw) for more
        general local case, restrict to a more special local case using a
        mapping from points in the general local PMC to a special local PMC.
        point_map_d and point_map_a specifies the point mappings on the D-side
        and the A-side.

        This function operates entirely by translation using the given point
        map, it does not know about formats for local PMCs or local strand
        diagrams.

        """
        def translate(lst, mapping):
            """lst consists of either integers or pairs of integers. Translate
            according to mapping. If any of the translated value is -1, return
            None. Otherwise return the translated list.

            """
            result = []
            for entry in lst:
                if isinstance(entry, int):
                    result.append(mapping[entry])
                    if result[-1] == -1:
                        return None
                else:  # entry must be a pair
                    result.append((mapping[entry[0]], mapping[entry[1]]))
                    if result[-1][0] == -1 or result[-1][1] == -1:
                        return None
            return result

        new_patterns = []
        for pattern in patterns:
            new_pattern = [translate(pattern_d, point_map_a)
                           for pattern_d in pattern[0:-1]]
            new_pattern.append(translate(pattern[-1], point_map_d))
            if all([entry != None for entry in new_pattern]):
                new_patterns.append(new_pattern)

        return new_patterns

    # The next series of functions specify the local arrows. The format is as
    # follows:
    # All but the last element of the tuple is a list to be passed to the sd()
    # function of the A-side local PMC, specifying the A-side inputs. The last
    # element of the tuple is a list to be passed to the sd() function of the
    # D-side local PMC, specifying the D-side output.
    @staticmethod
    def _short_underslide_down(seeds_only = False):
        """Short underslide going down, in the middle of PMC."""
        # Local PMC is 0*-1-2-3-4*, with 1 and 3 paired.
        patterns_raw = [
            #### Initial patterns
            ([(1, 2)],),
            ([], []), ([1], [1]), ([2], [2]), ([2], [1]), ([1, 2], [1, 2]),
            ([(2, 3)], [1]),
            ([(1, 2)], [(1, 3)]),
            ([(1, 3)], [(1, 3)]),
            ([2, (1, 3)], [2, (1, 3)]),
            ([(1, 2),(2, 3)], [(1, 2),(2, 3)]),
            ([(2, 3)], [(1, 2)], [(2, 3)]),
            ([(2, 3)], [(1, 3)], [(2, 3)]),
            #### Seeds for top
            ([(3, 4)], [(3, 4)]),
            ([2, (3, 4)], [2, (3, 4)]),
            #### Seeds for bottom
            ([(0, 1)], [(0, 1)]),
            ([2, (0, 1)], [2, (0, 1)]),
        ]
        if seeds_only:
            return patterns_raw

        patterns_raw += [
            # From seeds for top
            ([(2, 3), (3, 4)], [(1, 2)], [(1, 2), (2, 4)]),
            ([2, (3, 4)], [(2, 3)], [(1, 3)], [1, (2, 4)]),
            ([(2, 3)], [(1, 4)], [(2, 4)]),
            ([(2, 4)], [(3, 4)]),
            ([2, (3, 4)], [(2, 3)], [(1, 2)], [1, (2, 4)]),
            ([(1, 2), (2, 4)], [(1, 2), (2, 4)]),
            ([2, (1, 4)], [2, (1, 4)]),
            ([(1, 4)], [(1, 4)]),

            # From seeds for bottom
            ([(2, 3)], [(0, 2), (3, 4)], [(0, 1), (2, 4)]),
            ([(0, 2)], [(0, 3)]),
            ([(0, 1), (1, 4)], [(0, 1), (1, 4)]),
            ([(0, 1), (2, 4)], [(1, 2)], [1, (0, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(1, 2)], [1, (0, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(1, 2)], [(0, 1), (2, 4)]),
            ([1, (0, 2), (2, 4)], [1, (0, 2), (2, 4)]),
            ([2, (0, 1), (3, 4)], [2, (1, 3)], [1, 2, (0, 4)]),
            ([2, (0, 3), (3, 4)], [2, (0, 1), (1, 4)]),
            ([(3, 4)], [(0, 2)], [1, (0, 4)]),
            ([(0, 3)], [(0, 3)]),
            ([(0, 1), (2, 4)], [(1, 2)], [(0, 1), (2, 4)]),
            ([(0, 2), (3, 4)], [(0, 1), (1, 4)]),
            ([(2, 3)], [(0, 3), (3, 4)], [(0, 1), (2, 4)]),
            ([(2, 3), (3, 4)], [(0, 1), (1, 2)], [(0, 2), (2, 3), (3, 4)]),
            ([(0, 1), (2, 4)], [(1, 3)], [(0, 1), (2, 4)]),
            ([(0, 2), (2, 4)], [(0, 2), (2, 4)]),
            ([(2, 3)], [(0, 1), (1, 2)], [2, (3, 4)], [(0, 1), (2, 4)]),
            ([(2, 3)], [(0, 1), (1, 2)], [(0, 2), (2, 3)]),
            ([2, (3, 4)], [2, (0, 3)], [1, 2, (0, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(0, 1), (3, 4)]),
            ([(2, 4)], [(0, 3)], [(0, 1), (2, 4)]),
            ([(0, 1), (2, 4)], [(0, 1), (3, 4)]),
            ([(2, 4)], [(0, 2)], [(0, 1), (2, 4)]),
            ([(0, 3), (3, 4)], [(0, 1), (1, 4)]),
            ([(0, 2), (2, 3), (3, 4)], [(0, 2), (2, 3), (3, 4)]),
            ([(2, 4)], [(0, 2)], [1, (0, 4)]),
            ([(2, 4)], [(0, 3)], [1, (0, 4)]),
            ([(0, 1), (3, 4)], [(0, 1), (3, 4)]),
            ([2, (0, 3)], [2, (0, 3)]),
            ([2, (0, 1), (1, 4)], [2, (0, 1), (1, 4)]),
            ([(2, 3)], [(0, 1), (1, 2)], [(2, 3), (3, 4)], [(0, 1), (2, 4)]),
            ([2, (0, 1)], [1, (0, 2)]),
            ([(2, 3)], [(0, 1), (1, 4)], [(0, 1), (2, 4)]),
            ([(3, 4)], [(0, 3)], [1, (0, 4)]),
            ([(0, 4)], [(0, 4)]),
            ([(0, 1), (1, 2)], [2, (3, 4)], [(0, 1), (1, 4)]),
            ([(2, 3), (3, 4)], [(1, 2)], [2, (0, 1)], [1, (0, 2), (2, 4)]),
            ([2, (0, 3), (3, 4)], [1, (0, 2), (2, 4)]),
            ([2, (0, 1)], [2, (3, 4)], [(0, 1), (3, 4)]),
            ([2, (0, 4)], [2, (0, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(1, 3)], [(0, 1), (2, 4)]),
            ([(0, 1), (1, 2)], [(2, 3), (3, 4)], [(0, 1), (1, 4)]),
            ([(0, 1), (1, 2), (2, 4)], [(0, 1), (1, 2), (2, 4)]),
            ([1, (2, 4)], [(0, 1), (1, 2)], [1, (0, 2), (2, 4)]),
            ([(0, 1), (3, 4)], [(1, 2)], [1, (0, 4)]),
            ([(0, 1), (3, 4)], [(1, 3)], [1, (0, 4)]),
            ([(0, 1), (2, 4)], [(1, 3)], [1, (0, 4)]),
            ([2, (0, 1), (3, 4)], [2, (0, 1), (3, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(1, 3)], [1, (0, 4)]),
            ([(0, 2), (2, 3)], [(0, 2), (2, 3)]),
        ]
        return patterns_raw

    @staticmethod
    def _general_underslide_down(seeds_only = False):
        """Underslide of length >= 3 going down, in the middle of PMC."""
        # Local PMC at left (D-side) is 0*-1-2-3*, 4*-5-6*, with 1 and 5 paired.
        # Local PMC at right (A-side) is 0*-1-2*, 3*-4-5-6*, with 1 and 5
        # paired.
        patterns_raw = [
            #### Initial patterns
            ([(1, 2)],),
            ([], []), ([1], [1]), ([4], [2]), ([4], [1]), ([1, 4], [1, 2]),
            ([(4, 5)], [1]),
            #### Seeds for top
            ([(5, 6)], [(5, 6)]),
            ([4, (5, 6)], [2, (5, 6)]),
            #### Seeds for bottom
            ([(0, 1)], [(0, 1)]),
            ([4, (0, 1)], [2, (0, 1)]),
            #### Seeds for upper middle
            ([(3, 4)], [(4, 5)]),
            #### Seeds for lower middle
            ([4, (1, 2)], [1, (2, 3)]),
        ]
        if seeds_only:
            return patterns_raw

        patterns_raw += [
            # From seeds for top
            ([(4, 6)], [(5, 6)]),

            # From seeds for bottom
            ([4, (0, 1)], [(4, 5), (5, 6)], [(0, 1), (5, 6)]),
            ([4, (0, 1), (5, 6)], [2, (0, 1), (5, 6)]),
            ([4, (0, 1)], [4, (5, 6)], [(0, 1), (5, 6)]),
            ([(0, 1), (4, 6)], [(0, 1), (5, 6)]),
            ([4, (0, 1)], [1, (0, 2)]),
            ([(0, 1), (5, 6)], [(0, 1), (5, 6)]),

            # From seed for upper middle
            ([(3, 4), (4, 6)], [(1, 2), (4, 6)]),
            ([(0, 1), (3, 4)], [(0, 2), (4, 5)]),
            ([(3, 5)], [(4, 5)]),
            ([(3, 4), (4, 6)], [4, (0, 1)], [1, (0, 2), (4, 6)]),
            ([(3, 4), (4, 5)], [4, (0, 1), (5, 6)], [1, (0, 2), (4, 6)]),
            ([(0, 1), (3, 4)], [4, (5, 6)], [(0, 1), (4, 6)]),
            ([1, (3, 4)], [(4, 5), (5, 6)], [1, (4, 6)]),
            ([4, (0, 1), (3, 6)], [2, (0, 1), (4, 6)]),
            ([(0, 1), (3, 4)], [(4, 5), (5, 6)], [(0, 1), (4, 6)]),
            ([(3, 6)], [(4, 6)]),
            ([4, (3, 6)], [2, (4, 6)]),
            ([(3, 4), (5, 6)], [(4, 5), (5, 6)]),
            ([4, (0, 1), (3, 6)], [1, (0, 2), (4, 6)]),
            ([(4, 5)], [(3, 5), (5, 6)], [1, (4, 6)]),
            ([(0, 1), (3, 4), (5, 6)], [(0, 2), (4, 5), (5, 6)]),
            ([4, (3, 5)], [2, (4, 5)]),
            ([(0, 1), (3, 6)], [(0, 1), (4, 6)]),
            ([(4, 6)], [(3, 4)], [1, (4, 6)]),
            ([1, (3, 4)], [(1, 2), (4, 5)]),
            ([(4, 6)], [(3, 5)], [1, (4, 6)]),
            ([1, (3, 4)], [4, (5, 6)], [1, (4, 6)]),
            ([1, (3, 4)], [4, (0, 1), (5, 6)], [1, (0, 2), (4, 6)]),
            ([1, (3, 6)], [1, (4, 6)]),
            ([(3, 5), (5, 6)], [(4, 5), (5, 6)]),
            ([(0, 1), (3, 4), (4, 6)], [(0, 2), (4, 5), (5, 6)]),
            ([(3, 4), (4, 5)], [(1, 2), (4, 5)]),
            ([4, (0, 1)], [(3, 4), (4, 5), (5, 6)], [(0, 2), (4, 5), (5, 6)]),
            ([(4, 5)], [(3, 4), (5, 6)], [1, (4, 6)]),
            ([4, (3, 5), (5, 6)], [2, (4, 5), (5, 6)]),
            ([1, 4, (3, 6)], [1, 2, (4, 6)]),

            # From seed for lower middle
            ([(4, 5)], [(0, 2), (3, 4), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(4, 6)], [(3, 5)], [(1, 2)], [(2, 3), (4, 6)]),
            ([(1, 2), (3, 6)], [(1, 3), (4, 6)]),
            ([(0, 2)], [(0, 3)]),
            ([(4, 5), (5, 6)], [(1, 2)], [(2, 3), (5, 6)]),
            ([1, 4, (0, 2), (3, 6)], [1, 2, (0, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [4, (0, 1), (1, 2)], [4, (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([4, (0, 1), (1, 2)], [4, (5, 6)], [(0, 1), (2, 3), (5, 6)]),
            ([(0, 1), (1, 2), (3, 4)], [4, (5, 6)], [(0, 1), (1, 3), (4, 6)]),
            ([(0, 1), (1, 2), (4, 6)], [(0, 1), (2, 3), (5, 6)]),
            ([1, (0, 2)], [1, (0, 3)]),
            ([(4, 5), (5, 6)], [(1, 2), (3, 5)], [(2, 3), (4, 5), (5, 6)]),
            ([(1, 2), (4, 6)], [(3, 4)], [1, (2, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [4, (1, 2)], [(2, 3), (4, 5)]),
            ([4, (1, 2), (3, 6)], [2, (1, 3), (4, 6)]),
            ([(1, 2), (3, 5)], [(1, 3), (4, 5)]),
            ([(1, 2), (3, 4), (4, 6)], [(1, 2), (2, 3), (4, 6)]),
            ([4, (0, 1), (1, 2)], [(4, 5), (5, 6)], [(0, 1), (2, 3), (5, 6)]),
            ([4, (1, 2), (3, 5)], [2, (1, 3), (4, 5)]),
            ([(4, 6)], [(0, 2), (3, 4)], [1, (0, 3), (4, 6)]),
            ([1, (3, 4)], [(0, 2), (4, 5), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(4, 5)], [(1, 2), (3, 5)], [(2, 3), (4, 5)]),
            ([(0, 2), (3, 6)], [(0, 3), (4, 6)]),
            ([(1, 2), (4, 6)], [(3, 5)], [1, (2, 3), (4, 6)]),
            ([4, (0, 1), (1, 2)], [(3, 4), (4, 5), (5, 6)], [(0, 2), (2, 3), (4, 5), (5, 6)]),
            ([(0, 2), (4, 5)], [(3, 5), (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(1, 2), (3, 4), (4, 5)], [(1, 2), (2, 3), (4, 5)]),
            ([(1, 2), (4, 5)], [1, (2, 3)]),
            ([(0, 2), (3, 4), (5, 6)], [(0, 3), (4, 5), (5, 6)]),
            ([(4, 5)], [(0, 1), (1, 2), (3, 4)], [4, (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (4, 5)], [(3, 5), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [(4, 5), (5, 6)], [(1, 2)], [(2, 3), (4, 6)]),
            ([(0, 2), (4, 6)], [(0, 3), (5, 6)]),
            ([1, (3, 4), (4, 6)], [(1, 2), (4, 5)], [1, (2, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [(1, 2), (4, 6)], [(2, 3), (4, 6)]),
            ([4, (0, 1)], [(1, 2), (3, 4), (4, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([4, (0, 1), (1, 2)], [2, (0, 1), (1, 3)]),
            ([(0, 1), (1, 2), (3, 4), (4, 6)], [(0, 2), (2, 3), (4, 5), (5, 6)]),
            ([(0, 1), (1, 2)], [(0, 1), (1, 3)]),
            ([1, (4, 6)], [(1, 2), (3, 5)], [1, (2, 3), (4, 6)]),
            ([1, (4, 6)], [(1, 2), (3, 4)], [1, (2, 3), (4, 6)]),
            ([(0, 2), (4, 5)], [(3, 4), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(4, 5)], [(0, 1), (1, 2), (3, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([4, (0, 2)], [(0, 1), (2, 3)]),
            ([(0, 1), (4, 6)], [(1, 2), (3, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (3, 5)], [(0, 3), (4, 5)]),
            ([(0, 1), (3, 4), (4, 6)], [(1, 2), (4, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([1, (0, 2), (3, 4)], [(4, 5), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(4, 5)], [(3, 5), (5, 6)], [(0, 1), (1, 2)], [(0, 1), (2, 3), (4, 6)]),
            ([1, 4, (0, 2)], [1, 2, (0, 3)]),
            ([(3, 4), (4, 6)], [(4, 5)], [(0, 1), (1, 2)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (4, 6)], [(3, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([4, (0, 2), (5, 6)], [(0, 1), (2, 3), (5, 6)]),
            ([4, (0, 2)], [1, (0, 3)]),
            ([(3, 4), (4, 5)], [(0, 2), (4, 5), (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (3, 4), (4, 6)], [(0, 1), (1, 3), (4, 6)]),
            ([(0, 2), (3, 4), (4, 5)], [4, (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(4, 5)], [(0, 1), (1, 2), (3, 4)], [(0, 2), (2, 3), (4, 5)]),
            ([4, (0, 1), (1, 2)], [1, (0, 2), (2, 3)]),
            ([(1, 2), (3, 4)], [(1, 3), (4, 5)]),
            ([4, (0, 2), (3, 5)], [2, (0, 3), (4, 5)]),
            ([(3, 4), (4, 5)], [(1, 2), (4, 5)], [(2, 3), (4, 5)]),
            ([(3, 4), (4, 6)], [(4, 5)], [(1, 2)], [(2, 3), (4, 6)]),
            ([(0, 2), (4, 5)], [1, (0, 3)]),
            ([(4, 5), (5, 6)], [(1, 2), (3, 4)], [(2, 3), (4, 5), (5, 6)]),
            ([(0, 2), (4, 5), (5, 6)], [(0, 1), (2, 3), (5, 6)]),
            ([(4, 5)], [(3, 5), (5, 6)], [(1, 2)], [(2, 3), (4, 6)]),
            ([(0, 2), (4, 5)], [(0, 1), (2, 3)]),
            ([(4, 6)], [(0, 2), (3, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([(3, 4), (4, 6)], [(0, 2), (4, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([1, (3, 4), (4, 6)], [4, (1, 2)], [1, (2, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [(4, 5), (5, 6)], [(0, 1), (1, 2)], [(0, 1), (2, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [(0, 1), (1, 2), (4, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(3, 4), (4, 5)], [4, (0, 1), (1, 2)], [(0, 2), (2, 3), (4, 5)]),
            ([(0, 1), (3, 4), (4, 6)], [4, (1, 2)], [1, (0, 3), (4, 6)]),
            ([(1, 2), (3, 4), (4, 6)], [4, (0, 1)], [1, (0, 2), (2, 3), (4, 6)]),
            ([(4, 5)], [(1, 2)], [(2, 3)]),
            ([1, (0, 2), (3, 6)], [1, (0, 3), (4, 6)]),
            ([4, (1, 2)], [2, (1, 3)]),
            ([(3, 4), (4, 5)], [4, (0, 1), (1, 2)], [(4, 5), (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (3, 4), (4, 5)], [(0, 2), (2, 3), (4, 5)]),
            ([(4, 5)], [(0, 1), (1, 2), (3, 4)], [(4, 5), (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([4, (0, 1), (1, 2), (3, 6)], [2, (0, 1), (1, 3), (4, 6)]),
            ([(3, 4), (4, 5), (5, 6)], [4, (1, 2)], [(2, 3), (4, 5), (5, 6)]),
            ([(4, 6)], [(0, 2), (3, 5)], [1, (0, 3), (4, 6)]),
            ([4, (0, 1), (1, 2), (3, 6)], [1, (0, 2), (2, 3), (4, 6)]),
            ([(1, 2), (4, 5)], [(3, 4), (5, 6)], [1, (2, 3), (4, 6)]),
            ([(4, 5)], [(1, 2), (3, 6)], [(2, 3), (4, 6)]),
            ([4, (0, 2), (5, 6)], [2, (0, 3), (5, 6)]),
            ([4, (0, 2)], [2, (0, 3)]),
            ([(0, 2), (5, 6)], [(0, 3), (5, 6)]),
            ([(1, 2), (4, 5)], [(3, 5), (5, 6)], [1, (2, 3), (4, 6)]),
            ([(0, 1), (4, 6)], [(1, 2), (3, 4)], [1, (0, 3), (4, 6)]),
            ([4, (0, 2), (3, 5), (5, 6)], [2, (0, 3), (4, 5), (5, 6)]),
            ([(0, 1), (4, 6)], [(1, 2), (3, 5)], [1, (0, 3), (4, 6)]),
            ([4, (0, 2), (3, 6)], [2, (0, 3), (4, 6)]),
            ([1, (0, 2), (3, 4)], [4, (5, 6)], [1, (0, 3), (4, 6)]),
            ([(0, 1), (3, 4), (4, 6)], [(1, 2), (4, 5)], [1, (0, 3), (4, 6)]),
            ([(0, 2), (3, 4)], [(0, 3), (4, 5)]),
            ([(0, 1), (1, 2), (3, 6)], [(0, 1), (1, 3), (4, 6)]),
            ([(0, 2), (3, 4), (4, 5), (5, 6)], [(0, 2), (2, 3), (4, 5), (5, 6)]),
            ([(4, 5)], [(1, 2), (3, 4)], [(2, 3), (4, 5)]),
            ([(1, 2)], [(1, 3)]),
            ([(0, 2), (3, 5), (5, 6)], [(0, 3), (4, 5), (5, 6)]),
            ([(1, 2), (3, 4), (4, 5)], [4, (0, 1), (5, 6)], [1, (0, 2), (2, 3), (4, 6)]),
            ([(3, 4), (4, 5), (5, 6)], [4, (0, 1), (1, 2)], [(0, 2), (2, 3), (4, 5), (5, 6)]),
            ([1, (3, 4)], [4, (0, 2), (5, 6)], [1, (0, 3), (4, 6)]),
            ([(0, 2), (3, 4), (4, 6)], [(4, 5)], [(0, 1), (2, 3), (4, 6)]),
            ([(4, 5)], [(0, 1), (1, 2)], [(0, 1), (2, 3)]),
            ([(4, 5)], [(0, 2), (3, 5), (5, 6)], [1, (0, 3), (4, 6)]),
            ([4, (0, 2)], [(3, 4), (4, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(4, 5), (5, 6)], [(0, 1), (1, 2)], [(0, 1), (2, 3), (5, 6)]),
            ([(4, 5)], [(0, 2), (3, 5), (5, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(0, 2), (4, 6)], [(3, 5)], [1, (0, 3), (4, 6)]),
            ([(1, 2), (4, 6)], [(2, 3), (5, 6)]),
            ([(0, 1), (1, 2), (3, 4)], [(4, 5), (5, 6)], [(0, 1), (1, 3), (4, 6)]),
            ([(0, 2), (4, 6)], [(3, 4)], [1, (0, 3), (4, 6)]),
            ([(4, 6)], [(3, 5)], [(0, 1), (1, 2)], [(0, 1), (2, 3), (4, 6)]),
            ([(3, 4), (4, 5), (5, 6)], [(1, 2), (4, 5)], [(2, 3), (4, 5), (5, 6)]),
            ([4, (0, 2), (3, 6)], [(0, 1), (2, 3), (4, 6)]),
            ([(4, 5), (5, 6)], [(0, 1), (1, 2), (3, 4)], [(0, 2), (2, 3), (4, 5), (5, 6)]),
        ]
        return patterns_raw

    @staticmethod
    def _short_underslide_up(seeds_only = False):
        """Short underslide going up, in the middle of PMC."""
        # Local PMC is 0*-1-2-3-4*, with 1 and 3 paired.
        patterns_raw = [
            #### Initial patterns
            ([(2, 3)],),
            ([], []), ([1], [1]), ([2], [2]), ([2], [1]), ([1, 2], [1, 2]),
            ([(1, 2)], [1]),
            ([(2, 3)], [(1, 3)]),
            ([(1, 3)], [(1, 3)]),
            ([2, (1, 3)], [2, (1, 3)]),
            ([(1, 2),(2, 3)], [(1, 2),(2, 3)]),
            ([(2, 3)], [(1, 2)], [(1, 2)]),
            ([(1, 3)], [(1, 2)], [(1, 2)]),
            #### Seeds for top
            ([(3, 4)], [(3, 4)]),
            ([2, (3, 4)], [2, (3, 4)]),
            #### Seeds for bottom
            ([(0, 1)], [(0, 1)]),
            ([2, (0, 1)], [2, (0, 1)]),
        ]
        if seeds_only:
            return patterns_raw

        patterns_raw += [
            # From seeds for top
            ([(2, 3), (3, 4)], [(1, 2)], [(1, 2), (2, 4)]),
            ([(2, 4)], [(1, 4)]),
            ([(1, 4)], [(1, 4)]),
            ([2, (1, 4)], [2, (1, 4)]),
            ([2, (3, 4)], [1, (2, 4)]),
            ([(1, 2), (2, 4)], [(1, 2), (2, 4)]),

            # From seeds for bottom
            ([(1, 3)], [1, (0, 2)], [1, (0, 2)]),
            ([(1, 3)], [(0, 2), (3, 4)], [1, (0, 4)]),
            ([(2, 3)], [(0, 2), (3, 4)], [(0, 2), (3, 4)]),
            ([(0, 2), (3, 4)], [(0, 1), (3, 4)]),
            ([(1, 4)], [(0, 1)], [1, (0, 4)]),
            ([(0, 1), (1, 2), (2, 4)], [(0, 1), (1, 2), (2, 4)]),
            ([(0, 1), (1, 2)], [(2, 3), (3, 4)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(1, 3)], [(0, 2), (3, 4)], [(0, 2), (3, 4)]),
            ([(0, 2)], [(0, 1)]),
            ([1, (0, 2), (2, 4)], [1, (0, 2), (2, 4)]),
            ([(0, 1), (1, 4)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(0, 3)], [(0, 3)]),
            ([2, (0, 1), (1, 4)], [1, (0, 2), (2, 4)]),
            ([2, (0, 1), (1, 4)], [2, (0, 3), (3, 4)]),
            ([(0, 2), (2, 3), (3, 4)], [(0, 2), (2, 3), (3, 4)]),
            ([(0, 1), (2, 4)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(2, 3), (3, 4)], [1, (0, 2)], [1, (0, 2), (2, 4)]),
            ([(0, 1), (2, 4)], [(0, 3), (3, 4)]),
            ([2, (1, 3)], [2, (0, 1), (3, 4)], [1, 2, (0, 4)]),
            ([(2, 3)], [(0, 1), (1, 2)], [(0, 1), (1, 2)]),
            ([(0, 2), (2, 4)], [(0, 2), (2, 4)]),
            ([(2, 4)], [(0, 1)], [1, (0, 4)]),
            ([(0, 1), (1, 4)], [(0, 3), (3, 4)]),
            ([(2, 4)], [(0, 2)], [1, (0, 4)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(1, 3)], [(0, 1), (3, 4)], [1, (0, 4)]),
            ([(2, 3)], [(0, 1), (3, 4)], [1, (0, 4)]),
            ([(0, 1), (1, 2)], [(2, 3), (3, 4)], [(0, 3), (3, 4)]),
            ([2, (0, 3), (3, 4)], [2, (0, 3), (3, 4)]),
            ([(1, 4)], [(0, 2)], [(0, 2), (3, 4)]),
            ([(0, 1), (1, 2)], [2, (3, 4)], [(0, 1), (3, 4)]),
            ([(2, 3), (3, 4)], [(0, 1), (1, 2)], [(0, 1), (1, 2), (2, 4)]),
            ([(0, 1), (3, 4)], [(0, 1), (3, 4)]),
            ([2, (0, 3)], [2, (0, 3)]),
            ([(0, 3), (3, 4)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(1, 4)], [(0, 2)], [1, (0, 4)]),
            ([(0, 4)], [(0, 4)]),
            ([2, (1, 4)], [2, (0, 1)], [1, 2, (0, 4)]),
            ([(2, 3)], [1, (0, 2)], [1, (0, 2)]),
            ([2, (0, 4)], [2, (0, 4)]),
            ([2, (0, 1)], [2, (3, 4)], [(0, 1), (3, 4)]),
            ([(2, 3)], [(0, 2), (3, 4)], [1, (0, 4)]),
            ([(0, 3)], [(1, 2)], [(0, 2)]),
            ([2, (0, 1)], [(2, 3), (3, 4)], [(0, 3), (3, 4)]),
            ([(1, 3)], [(0, 1), (1, 2)], [(0, 1), (1, 2)]),
            ([(2, 4)], [(0, 2)], [(0, 2), (3, 4)]),
            ([(0, 3), (3, 4)], [(0, 3), (3, 4)]),
            ([2, (0, 1), (3, 4)], [2, (0, 1), (3, 4)]),
            ([(0, 2), (2, 3)], [(0, 2), (2, 3)]),
        ]
        return patterns_raw

    @staticmethod
    def _general_underslide_up(seeds_only = False):
        """Underslide of length >= 3 going up, in the middle of PMC."""
        # Local PMC at left (D-side) is 0*-1-2*, 3*-4-5-6*, with 1 and 5 paired.
        # Local PMC at right (A-side) is 0*-1-2-3*, 4*-5-6*, with 1 and 5
        # paired.
        patterns_raw = [
            #### Initial patterns
            ([(4, 5)],),
            ([], []), ([1], [1]), ([2], [4]), ([2], [1]), ([1, 2], [1, 4]),
            ([(1, 2)], [1]),
            #### Seeds for top
            ([(5, 6)], [(5, 6)]),
            ([2, (5, 6)], [4, (5, 6)]),
            #### Seeds for bottom
            ([(0, 1)], [(0, 1)]),
            ([2, (0, 1)], [4, (0, 1)]),
            #### Seed for upper middle
            ([2, (4, 5)], [1, (3, 4)]),
            #### Seed for lower middle
            ([(2, 3)], [(1, 2)]),
        ]
        if seeds_only:
            return patterns_raw

        patterns_raw += [
            # From seeds for top
            ([2, (5, 6)], [1, (4, 6)]),

            # From seeds for bottom
            ([2, (0, 1)], [2, (5, 6)], [(0, 1), (5, 6)]),
            ([(0, 2), (5, 6)], [(0, 1), (5, 6)]),
            ([2, (0, 1), (5, 6)], [4, (0, 1), (5, 6)]),
            ([(0, 2)], [(0, 1)]),
            ([(0, 1), (1, 2)], [2, (5, 6)], [(0, 1), (5, 6)]),
            ([(0, 1), (5, 6)], [(0, 1), (5, 6)]),

            # From seed for upper middle
            ([2, (4, 5)], [4, (3, 5)]),
            ([1, (4, 6)], [1, (3, 6)]),
            ([(0, 2), (4, 5), (5, 6)], [(0, 1), (3, 4), (5, 6)]),
            ([(4, 5)], [(3, 5)]),
            ([(0, 1), (1, 2), (4, 6)], [(0, 1), (3, 4), (5, 6)]),
            ([2, (4, 6)], [4, (3, 6)]),
            ([2, (0, 1)], [2, (4, 5), (5, 6)], [(0, 1), (3, 4), (5, 6)]),
            ([(4, 5), (5, 6)], [(1, 2)], [(3, 4), (5, 6)]),
            ([(1, 2), (4, 6)], [(3, 4), (5, 6)]),
            ([(0, 1), (4, 6)], [(0, 1), (3, 6)]),
            ([1, 2, (4, 6)], [1, 4, (3, 6)]),
            ([(4, 5)], [(1, 2)], [(3, 4)]),
            ([(1, 2), (4, 5)], [1, (3, 4)]),
            ([2, (0, 1), (4, 6)], [4, (0, 1), (3, 6)]),
            ([2, (4, 6)], [1, (3, 6)]),
            ([(0, 1), (1, 2)], [2, (4, 5), (5, 6)], [(0, 1), (3, 4), (5, 6)]),
            ([(0, 2), (4, 5)], [(0, 1), (3, 4)]),
            ([2, (4, 6)], [(3, 4), (5, 6)]),
            ([(4, 5), (5, 6)], [(3, 5), (5, 6)]),
            ([(4, 6)], [(3, 6)]),
            ([2, (4, 5), (5, 6)], [1, (3, 4), (4, 6)]),
            ([(1, 2), (4, 6)], [1, (3, 6)]),
            ([2, (0, 1), (4, 6)], [(0, 1), (3, 4), (5, 6)]),
            ([2, (4, 5), (5, 6)], [4, (3, 5), (5, 6)]),
            ([(0, 2), (4, 6)], [(0, 1), (3, 6)]),
            ([(4, 5)], [(0, 1), (1, 2)], [(0, 1), (3, 4)]),
            ([(4, 5), (5, 6)], [(0, 1), (1, 2)], [(0, 1), (3, 4), (5, 6)]),

            # From seed for lower middle
            ([2, (0, 3), (4, 5), (5, 6)], [4, (0, 2), (3, 5), (5, 6)]),
            ([2, (0, 3), (5, 6)], [4, (0, 2), (5, 6)]),
            ([(2, 3), (5, 6)], [(0, 1)], [1, (0, 2), (4, 6)]),
            ([(1, 3), (4, 5)], [(1, 2)], [(1, 2), (3, 4)]),
            ([(0, 2), (4, 5), (5, 6)], [(1, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3)], [(0, 2), (4, 5)], [1, (0, 2), (3, 4)]),
            ([2, (4, 5)], [(0, 1), (1, 2), (2, 3)], [(0, 1), (1, 2), (3, 4)]),
            ([2, (1, 3)], [2, (0, 1), (4, 6)], [1, 4, (0, 2), (3, 6)]),
            ([(0, 3), (4, 5)], [(0, 2), (3, 5)]),
            ([(0, 2), (2, 3)], [2, (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3), (4, 5)], [(0, 2), (5, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(2, 3), (4, 5)], [(0, 1), (1, 2)], [(0, 1), (1, 2), (3, 4)]),
            ([(0, 1), (1, 2), (2, 3)], [2, (5, 6)], [(0, 1), (1, 2), (4, 6)]),
            ([(2, 3), (4, 5)], [(0, 2), (5, 6)], [1, (0, 2), (3, 6)]),
            ([2, (1, 3), (4, 6)], [2, (0, 1)], [1, 4, (0, 2), (3, 6)]),
            ([(0, 1), (1, 2), (4, 6)], [(1, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([1, 2, (0, 3)], [1, 4, (0, 2)]),
            ([(0, 1), (1, 3), (4, 6)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (0, 3), (4, 6)], [4, (0, 2), (3, 6)]),
            ([(4, 5)], [(1, 3)], [(0, 2)], [(0, 2), (3, 4)]),
            ([(2, 3)], [(0, 2), (4, 6)], [1, (0, 2), (3, 6)]),
            ([(0, 1), (2, 3)], [(5, 6)], [(0, 2), (5, 6)]),
            ([(0, 1), (1, 2)], [2, (4, 5), (5, 6)], [(1, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([(0, 1), (1, 3)], [(1, 2), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(2, 3)], [(0, 1)], [1, (0, 2)]),
            ([2, (0, 1), (1, 3), (4, 6)], [1, (0, 2), (3, 4), (4, 6)]),
            ([(1, 3), (4, 6)], [(1, 2), (3, 6)]),
            ([(1, 2), (4, 6)], [(0, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3), (4, 5)], [(0, 1), (1, 2)], [(0, 1), (1, 2), (3, 4)]),
            ([1, (4, 6)], [(0, 1), (1, 3)], [1, (0, 2), (3, 6)]),
            ([(1, 2), (2, 3), (4, 6)], [(1, 2), (3, 4), (4, 6)]),
            ([2, (0, 1)], [(2, 3), (4, 5), (5, 6)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (0, 3), (4, 5)], [4, (0, 2), (3, 5)]),
            ([2, (0, 1), (1, 3)], [1, 2, (4, 6)], [1, 4, (0, 2), (3, 6)]),
            ([(1, 2)], [(0, 2), (2, 3), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(4, 5)], [(0, 1), (1, 2)], [(1, 2), (2, 3)], [(0, 2), (3, 4)]),
            ([2, (1, 3), (4, 5)], [2, (0, 1), (5, 6)], [1, 4, (0, 2), (3, 6)]),
            ([(4, 5), (5, 6)], [(0, 1), (1, 3)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (1, 3)], [4, (1, 2)]),
            ([1, (2, 3)], [(1, 2), (4, 5)]),
            ([2, (4, 5)], [(1, 2), (2, 3)], [(1, 2), (3, 4)]),
            ([(0, 2), (2, 3), (4, 5), (5, 6)], [(0, 1), (1, 2), (3, 4), (4, 6)]),
            ([(2, 3)], [(0, 2)], [1, (0, 2)]),
            ([(0, 2), (4, 5)], [(1, 2), (2, 3)], [(0, 2), (3, 4)]),
            ([(2, 3)], [(0, 1), (4, 6)], [1, (0, 2), (3, 6)]),
            ([1, (0, 2), (2, 3)], [2, (5, 6)], [1, (0, 2), (4, 6)]),
            ([(4, 5), (5, 6)], [(1, 2)], [(0, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (4, 5), (5, 6)], [(1, 2), (2, 3)], [(1, 2), (3, 4), (4, 6)]),
            ([(1, 2), (4, 5)], [1, (0, 2), (2, 3)], [1, (0, 2), (3, 4)]),
            ([(0, 1), (1, 3)], [(1, 2), (4, 6)], [1, (0, 2), (3, 6)]),
            ([(0, 1), (1, 3)], [(1, 2), (4, 5)], [1, (0, 2), (3, 4)]),
            ([(0, 1), (2, 3)], [(4, 5), (5, 6)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3), (4, 5)], [(0, 1), (5, 6)], [1, (0, 2), (3, 6)]),
            ([(2, 3), (4, 5), (5, 6)], [(0, 1), (1, 2)], [(0, 1), (1, 2), (3, 4), (4, 6)]),
            ([(4, 5)], [(1, 2)], [(0, 2), (2, 3)], [(0, 2), (3, 4)]),
            ([(1, 3), (4, 6)], [(0, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([(0, 2), (2, 3)], [(0, 2), (4, 5)]),
            ([1, (0, 3)], [1, (0, 2)]),
            ([(4, 5), (5, 6)], [(1, 3)], [(0, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3), (4, 5)], [(1, 2), (3, 5)]),
            ([(2, 3), (5, 6)], [(1, 2), (4, 6)]),
            ([2, (1, 3), (4, 5)], [4, (1, 2), (3, 5)]),
            ([2, (0, 1)], [2, (4, 5), (5, 6)], [(1, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([(2, 3), (4, 5)], [(0, 1), (5, 6)], [1, (0, 2), (3, 6)]),
            ([(0, 1), (2, 3)], [(1, 2), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(2, 3), (4, 6)], [(0, 1)], [1, (0, 2), (3, 6)]),
            ([(0, 3), (4, 5), (5, 6)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (0, 3), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 2), (4, 5)], [(0, 2), (2, 3), (5, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (4, 5), (5, 6)], [(0, 1), (1, 2), (2, 3)], [(0, 1), (1, 2), (3, 4), (4, 6)]),
            ([(0, 1), (2, 3)], [(0, 2), (4, 5)]),
            ([(2, 3), (4, 6)], [(0, 2)], [1, (0, 2), (3, 6)]),
            ([(2, 3), (4, 5)], [(1, 2)], [(1, 2), (3, 4)]),
            ([(0, 1), (1, 2)], [(2, 3), (4, 5), (5, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([(0, 1), (1, 3)], [1, (4, 6)], [1, (0, 2), (3, 6)]),
            ([(0, 1), (2, 3), (4, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([2, (1, 3), (4, 6)], [4, (1, 2), (3, 6)]),
            ([(1, 3)], [(1, 2)]),
            ([2, (0, 3)], [4, (0, 2)]),
            ([1, (2, 3)], [(0, 1), (5, 6)], [1, (0, 2), (4, 6)]),
            ([2, (0, 1)], [(1, 2), (2, 3), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(0, 2), (2, 3), (5, 6)], [2, (4, 5)], [1, (0, 2), (3, 4), (4, 6)]),
            ([(0, 1), (1, 2), (2, 3)], [2, (4, 5), (5, 6)], [(0, 1), (1, 2), (3, 4), (4, 6)]),
            ([(0, 1), (1, 2)], [(2, 3), (5, 6)], [(0, 2), (5, 6)]),
            ([(2, 3), (5, 6)], [(0, 2)], [1, (0, 2), (4, 6)]),
            ([(4, 5)], [(0, 1), (1, 3)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(0, 3), (4, 5), (5, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([2, (0, 1), (5, 6)], [(1, 2), (2, 3), (4, 5)], [1, (0, 2), (3, 4), (4, 6)]),
            ([(0, 3), (5, 6)], [(0, 2), (5, 6)]),
            ([(0, 1), (2, 3), (5, 6)], [(0, 2), (4, 5), (5, 6)]),
            ([1, 2, (4, 6)], [2, (0, 1), (1, 3)], [1, 4, (0, 2), (3, 6)]),
            ([(0, 2), (2, 3), (4, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([(1, 3), (4, 6)], [(0, 2)], [1, (0, 2), (3, 6)]),
            ([(1, 3), (4, 5)], [(0, 2), (5, 6)], [1, (0, 2), (3, 6)]),
            ([(0, 2), (2, 3), (5, 6)], [(0, 2), (4, 5), (5, 6)]),
            ([(1, 2), (4, 5)], [(0, 1), (1, 2), (2, 3)], [(0, 1), (1, 2), (3, 4)]),
            ([2, (4, 5)], [1, (0, 2), (2, 3)], [1, (0, 2), (3, 4)]),
            ([(1, 3)], [(0, 2), (4, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([(1, 3)], [(0, 2)], [1, (0, 2)]),
            ([(2, 3), (4, 5), (5, 6)], [(1, 2)], [(1, 2), (3, 4), (4, 6)]),
            ([(0, 1), (2, 3), (5, 6)], [(1, 2), (4, 5)], [1, (0, 2), (3, 4), (4, 6)]),
            ([(0, 1), (1, 3)], [(0, 1), (1, 2)]),
            ([2, (0, 1), (1, 3), (4, 6)], [4, (0, 2), (3, 5), (5, 6)]),
            ([(0, 2), (2, 3), (4, 5)], [2, (5, 6)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (0, 3), (4, 5), (5, 6)], [1, (0, 2), (3, 4), (4, 6)]),
            ([2, (0, 1)], [(2, 3), (5, 6)], [(0, 2), (5, 6)]),
            ([(0, 1), (2, 3)], [(4, 5), (5, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([(0, 2), (2, 3), (4, 5)], [(0, 2), (3, 4), (4, 5)]),
            ([(1, 3)], [(0, 2), (4, 6)], [1, (0, 2), (3, 6)]),
            ([(1, 3), (4, 6)], [(0, 1)], [1, (0, 2), (3, 6)]),
            ([(0, 3), (4, 5)], [(1, 2)], [(0, 2), (3, 4)]),
            ([(2, 3)], [(0, 2), (4, 5)], [1, (0, 2), (3, 4)]),
            ([(0, 3)], [(0, 2)]),
            ([(0, 3), (4, 6)], [(0, 2), (3, 6)]),
            ([(0, 1), (1, 2), (2, 3), (4, 6)], [(0, 1), (1, 2), (3, 4), (4, 6)]),
            ([(2, 3), (4, 5)], [(1, 2), (3, 5)]),
            ([(1, 2), (2, 3), (4, 5)], [(1, 2), (3, 4), (4, 5)]),
            ([(0, 1), (1, 3)], [(1, 2)], [1, (0, 2)]),
            ([(0, 1), (1, 2)], [(2, 3), (4, 5), (5, 6)], [(1, 2)], [(0, 2), (3, 4), (5, 6)]),
            ([(0, 1), (1, 3), (4, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([(1, 2)], [(0, 1), (2, 3)], [1, (0, 2)]),
            ([(1, 3)], [(0, 1), (4, 6)], [1, (0, 2), (3, 6)]),
            ([(2, 3), (4, 5)], [1, (0, 2)], [1, (0, 2), (3, 4)]),
            ([(2, 3), (4, 6)], [(1, 2), (3, 6)]),
            ([2, (0, 1), (1, 3)], [4, (0, 1), (1, 2)]),
            ([(4, 5), (5, 6)], [(0, 1), (1, 2)], [(1, 2), (2, 3)], [(0, 2), (3, 4), (5, 6)]),
            ([2, (0, 1)], [(2, 3), (4, 5), (5, 6)], [(0, 2), (3, 5), (5, 6)]),
            ([2, (5, 6)], [(0, 2), (2, 3), (4, 5)], [1, (0, 2), (3, 4), (4, 6)]),
            ([(1, 2), (4, 5)], [(1, 2), (2, 3)], [(1, 2), (3, 4)]),
            ([(0, 1), (1, 2)], [1, (2, 3)], [1, (0, 2)]),
            ([(1, 3), (4, 5)], [1, (0, 2)], [1, (0, 2), (3, 4)]),
            ([1, (2, 3)], [(0, 2), (5, 6)], [1, (0, 2), (4, 6)]),
            ([(1, 2), (2, 3)], [(1, 2), (4, 5)]),
        ]
        return patterns_raw
